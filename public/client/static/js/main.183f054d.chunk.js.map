{"version":3,"sources":["assets/js/ts-ansi/colors.js","components/websocket/index.js","components/terminal/index.js","App.js","serviceWorker.js","index.js","assets/js/ts-ansi/index.js"],"names":["Object","defineProperty","exports","value","colormap","color","background","bright","i","undefined","Websocket","props","_this","this","classCallCheck","socket","WebSocket","uri","terminal","onmessage","ev","data","dobj","JSON","parse","event","print","payload","prompt","setMask","mask","console","log","e","addListener","input","readyState","send","createClass","key","obj","stringify","json","module","Terminal","_Component","possibleConstructorReturn","getPrototypeOf","call","state","buffer","listeners","history","hisCursor","maxLines","React","createRef","container","inherits","window","location","host","arguments","length","setState","cb","push","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","entries","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","text","split","err","return","_this2","Array","join","parseAnsi","map","d","concat","getLineCount","shift","current","scrollIntoView","behavior","block","focus","target","inp","setInput","onInput","onSubmit","onHistoryCurs","_this3","newInput","temp","dir","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","listener","newPrompt","react_default","a","createElement","ref","className","onClick","bind","onKeyDown","onKeyPress","ansiList","ansi","colorStyle","backgroundColor","fontWeight","bold","textDecoration","underline","style","autoFocus","autoComplete","type","Classes","FILL","onFocus","moveToEnd","onChange","Component","App","document","title","terminal_Terminal","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","colors_1","require","defaultForeground","defaultBackground","ansiParses","captureColor","escape","test","containsAnsi","forEach","char","exec","Number","brightColor","bgold","fgold","assign"],"mappings":"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","file":"static/js/main.183f054d.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.colormap = {};\nexports.colormap[0] = {\n    color: null,\n    background: null,\n};\nexports.colormap[30] = {\n    color: \"black\",\n    background: null,\n    bright: \"gray\",\n};\nexports.colormap[31] = {\n    color: \"red\",\n    background: null,\n    bright: \"crimson\",\n};\nexports.colormap[32] = {\n    color: \"green\",\n    background: null,\n    bright: \"lime\",\n};\nexports.colormap[33] = {\n    color: \"yellow\",\n    background: null,\n    bright: \"khaki\",\n};\nexports.colormap[34] = {\n    color: \"blue\",\n    background: null,\n    bright: \"slateblue\",\n};\nexports.colormap[35] = {\n    color: \"magenta\",\n    background: null,\n    bright: \"orchid\",\n};\nexports.colormap[36] = {\n    color: \"cyan\",\n    background: null,\n    bright: \"lightcyan\",\n};\nexports.colormap[37] = {\n    color: \"white\",\n    background: null,\n    bright: \"white\",\n};\nfor (let i = 30; i < 38; i++) {\n    const color = exports.colormap[i];\n    if (color !== undefined) {\n        exports.colormap[i + 10] = {\n            color: null,\n            background: color.color,\n            bright: color.bright,\n        };\n    }\n}\n","export class Websocket {\n    constructor(props) {\n        this.socket = new WebSocket(props.uri);\n        this.terminal = props.terminal;\n        this.socket.onmessage = (ev) => {\n            const data = ev.data;\n            try {\n                const dobj = JSON.parse(data);\n                switch (dobj.event) {\n                    case \"client/prompt\":\n                        this.terminal.print(dobj.payload.prompt);\n                        this.terminal.setMask(dobj.payload.mask);\n                        break;\n                    case \"client/print\":\n                        this.terminal.print(dobj.payload);\n                        break;\n                    default:\n                        console.log(\"Unhandled event from server:\", dobj);\n                        break;\n                }\n            } catch (e) {}\n        };\n        this.terminal.addListener((input) => {\n            if (\n                this.socket.readyState === 1 &&\n                input !== \"\" &&\n                input !== undefined\n            ) {\n                this.socket.send(input);\n            }\n        });\n    }\n    json(obj) {\n        this.socket.send(JSON.stringify(obj));\n    }\n    event(event, payload) {\n        this.json({ event, payload });\n    }\n    gmcp(module, data) {\n        this.event(\"gmcp\", { module, data });\n    }\n}\n","import React, { Component } from \"react\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { parseAnsi } from \"../../assets/js/ts-ansi\";\nimport \"./terminal.css\";\n\nimport { Websocket } from \"../websocket\";\n\nexport class Terminal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buffer: [],\n            input: \"\",\n            prompt: \"> \",\n            mask: false,\n            listeners: [],\n            history: [],\n            hisCursor: 0,\n            maxLines: props.maxLines || 1000,\n        };\n        this.input = React.createRef();\n        this.container = React.createRef();\n    }\n    componentDidMount() {\n        this.socket = new Websocket({\n            uri:\n                window.location.host === \"gorgon.mudjs.net\"\n                    ? \"wss://gorgon.mudjs.net/socket\"\n                    : \"ws://localhost:5557\",\n            terminal: this,\n        });\n    }\n    setMask(mask = false) {\n        const state = this.state;\n        state.mask = mask;\n        this.setState(state);\n    }\n    addListener(cb) {\n        const state = this.state;\n        state.listeners.push(cb);\n        this.setState(state);\n    }\n    getLineCount() {\n        const state = this.state;\n        let count = 0;\n        for (const entries of state.buffer) {\n            for (const entry of entries) {\n                count += entry.text.split(\"\\n\").length;\n            }\n        }\n        return count;\n    }\n    print(data) {\n        const state = this.state;\n        if (data instanceof Array) {\n            data = data.join(\"\\n\");\n        }\n        data = parseAnsi(data, \"white\", \"#282c34\");\n        const key = state.buffer.length;\n        data = data.map((d, i) => {\n            d.key = `print-${key}-${i}`;\n            return d;\n        });\n        state.buffer.push(data);\n        const count = this.getLineCount();\n        if (count > state.maxLines) {\n            state.buffer.shift();\n        }\n        this.setState(state, () => {\n            this.input.current.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"end\",\n            });\n        });\n    }\n    onClick(event) {\n        this.input.current.focus();\n    }\n    onChange(event) {\n        const state = this.state;\n        state.input = event.target.value;\n        this.setState(state);\n    }\n    onSubmit() {\n        if (this.state.input !== \"\") {\n            const inp = this.state.input;\n            this.setInput();\n            this.onInput(inp);\n        }\n    }\n    onKeyPress(event) {\n        const key = event.key;\n        switch (key) {\n            case \"Enter\":\n                this.onSubmit();\n                break;\n            case \"ArrowUp\":\n                this.onHistoryCurs(-1);\n                break;\n            case \"ArrowDown\":\n                this.onHistoryCurs(1);\n                break;\n            case \"Escape\":\n                this.setInput();\n                break;\n            default:\n                break;\n        }\n    }\n    setInput(newInput = \"\") {\n        const state = this.state;\n        state.input = newInput;\n        this.setState(state, () => {\n            this.input.current.focus();\n        });\n    }\n    moveToEnd(event) {\n        const temp = event.target.value;\n        event.target.value = \"\";\n        event.target.value = temp;\n    }\n    onHistoryCurs(dir) {\n        const state = this.state;\n        state.hisCursor += dir;\n        if (state.hisCursor > state.history.length) state.hisCursor = 0;\n        if (state.hisCursor < 0) state.hisCursor = state.history.length - 1;\n        this.setInput(state.history[state.hisCursor]);\n        this.setState(state);\n    }\n    onInput(inp) {\n        if (!this.state.mask) {\n            const state = this.state;\n            state.history.push(inp);\n            state.hisCursor = state.history.length;\n            this.setState(state);\n            this.print(this.state.prompt + inp);\n        } else {\n            this.setMask();\n        }\n        for (const listener of this.state.listeners) {\n            listener(inp);\n        }\n    }\n    clear() {\n        const state = this.state;\n        state.buffer = \"\";\n        this.setState(state);\n    }\n    setPrompt(newPrompt = \"> \") {\n        const state = this.state;\n        state.prompt = newPrompt;\n        this.setState(state);\n    }\n    render() {\n        return (\n            <div\n                ref={this.container}\n                className=\"terminal-container\"\n                onClick={this.onClick.bind(this)}\n                onKeyDown={this.onKeyPress.bind(this)}\n            >\n                <div className=\"terminal-output terminal-text\">\n                    {this.state.buffer.map((ansiList, i) => {\n                        return (\n                            <span key={`print-${i}`}>\n                                {ansiList.map((ansi) => {\n                                    const colorStyle = {\n                                        color: ansi.color,\n                                        backgroundColor: ansi.background,\n                                        fontWeight: ansi.bold\n                                            ? \"bold\"\n                                            : \"inherit\",\n                                        textDecoration: ansi.underline\n                                            ? \"underline\"\n                                            : \"inherit\",\n                                    };\n                                    return (\n                                        <span key={ansi.key} style={colorStyle}>\n                                            {ansi.text}\n                                        </span>\n                                    );\n                                })}\n                                {\"\\n\"}\n                            </span>\n                        );\n                    })}\n                </div>\n                <div className=\"terminal-input-container\">\n                    <span className=\"terminal-text terminal-prompt\">\n                        {this.state.prompt}\n                    </span>\n                    <input\n                        autoFocus\n                        autoComplete=\"new-password\"\n                        type={this.state.mask ? \"password\" : \"text\"}\n                        ref={this.input}\n                        className={[\n                            \"terminal-text\",\n                            Classes.FILL,\n                            \"terminal-input\",\n                        ].join(\" \")}\n                        value={this.state.input}\n                        onFocus={this.moveToEnd.bind(this)}\n                        onChange={this.onChange.bind(this)}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/normalize.css\";\nimport \"../node_modules/@blueprintjs/core/lib/css/blueprint.css\";\nimport \"../node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\nimport { Terminal } from \"./components/terminal\";\n\nfunction App() {\n    document.title = \"MOOts Client\";\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <title>MOOts Client</title>\n                <Terminal maxLines={1000} />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst colors_1 = require(\"./colors\");\nfunction ansiRegex() {\n    return /\\x1b\\[(\\d+);?(?:(\\d+))?m/g;\n}\nfunction containsAnsi(text) {\n    return ansiRegex().test(text);\n}\nfunction parseAnsi(text, defaultForeground = \"inherit\", defaultBackground = \"inherit\") {\n    const current = {\n        color: defaultForeground,\n        background: defaultBackground,\n        bold: false,\n        underline: false,\n        text,\n    };\n    const ansiParses = [];\n    let buffer = \"\";\n    let captureColor = false;\n    let escape = \"\";\n    if (containsAnsi(text)) {\n        text.split(\"\").forEach((char, i) => {\n            if (!captureColor) {\n                if (char === \"\\x1b\") {\n                    // ANSI escape start\n                    escape += char;\n                    captureColor = true;\n                    if (buffer.length > 0) {\n                        current.text = buffer;\n                        buffer = \"\";\n                        ansiParses.push(Object.assign({}, current));\n                    }\n                }\n                else {\n                    buffer += char;\n                }\n            }\n            else {\n                escape += char;\n                if (char === \"m\") {\n                    // ANSI escape end\n                    captureColor = false;\n                    const reg = ansiRegex();\n                    const match = reg.exec(escape);\n                    if (match !== null) {\n                        const color = Number(match[1]);\n                        const brightColor = match[2] !== undefined;\n                        switch (color) {\n                            case 0:\n                                current.background = defaultBackground;\n                                current.color = defaultForeground;\n                                current.bold = false;\n                                current.underline = false;\n                                break;\n                            case 1:\n                                current.bold = true;\n                                break;\n                            case 4:\n                                current.underline = true;\n                                break;\n                            case 7:\n                                const bgold = current.background;\n                                const fgold = current.color;\n                                current.background = fgold;\n                                current.color = bgold;\n                            default:\n                                const ansi = colors_1.colormap[color];\n                                if (ansi !== undefined) {\n                                    if (ansi.background !== null) {\n                                        if (brightColor &&\n                                            ansi.bright !== undefined) {\n                                            current.background = ansi.bright;\n                                        }\n                                        else {\n                                            current.background =\n                                                ansi.background;\n                                        }\n                                    }\n                                    else if (ansi.color !== null) {\n                                        if (brightColor &&\n                                            ansi.bright !== undefined) {\n                                            current.color = ansi.bright;\n                                        }\n                                        else {\n                                            current.color = ansi.color;\n                                        }\n                                    }\n                                }\n                                break;\n                        }\n                    }\n                    escape = \"\";\n                }\n            }\n        });\n        if (buffer.length > 0) {\n            current.text = buffer;\n            buffer = \"\";\n            ansiParses.push(Object.assign({}, current));\n        }\n        return ansiParses;\n    }\n    else {\n        return [Object.assign({}, current)];\n    }\n}\nexports.parseAnsi = parseAnsi;\n"],"sourceRoot":""}