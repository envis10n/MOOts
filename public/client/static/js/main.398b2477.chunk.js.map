{"version":3,"sources":["components/websocket/index.js","components/terminal/index.js","App.js","serviceWorker.js","index.js"],"names":["Websocket","props","_this","this","Object","classCallCheck","socket","WebSocket","uri","terminal","onmessage","ev","data","dobj","JSON","parse","event","print","payload","prompt","setMask","mask","console","log","e","addListener","input","readyState","undefined","send","createClass","key","value","obj","stringify","json","module","Terminal","_Component","possibleConstructorReturn","getPrototypeOf","call","state","buffer","listeners","React","createRef","container","inherits","window","location","host","arguments","length","setState","cb","push","_this2","concat","current","scrollIntoView","behavior","block","focus","target","preventDefault","inp","onInput","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","listener","err","return","newPrompt","react_default","a","createElement","ref","className","onClick","bind","onSubmit","type","Classes","FILL","join","onChange","Component","App","terminal_Terminal","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.398b2477.chunk.js","sourcesContent":["export class Websocket {\n    constructor(props) {\n        this.socket = new WebSocket(props.uri);\n        this.terminal = props.terminal;\n        this.socket.onmessage = (ev) => {\n            const data = ev.data;\n            try {\n                const dobj = JSON.parse(data);\n                switch (dobj.event) {\n                    case \"client/prompt\":\n                        this.terminal.print(dobj.payload.prompt);\n                        this.terminal.setMask(dobj.payload.mask);\n                        break;\n                    case \"client/print\":\n                        this.terminal.print(dobj.payload);\n                        break;\n                    default:\n                        console.log(\"Unhandled event from server:\", dobj);\n                        break;\n                }\n            } catch (e) {}\n        };\n        this.terminal.addListener((input) => {\n            if (\n                this.socket.readyState === 1 &&\n                input !== \"\" &&\n                input !== undefined\n            ) {\n                this.socket.send(input);\n            }\n        });\n    }\n    json(obj) {\n        this.socket.send(JSON.stringify(obj));\n    }\n    event(event, payload) {\n        this.json({ event, payload });\n    }\n    gmcp(module, data) {\n        this.event(\"gmcp\", { module, data });\n    }\n}\n","import React, { Component } from \"react\";\nimport { Classes } from \"@blueprintjs/core\";\nimport \"./terminal.css\";\n\nimport { Websocket } from \"../websocket\";\n\nexport class Terminal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buffer: \"\",\n            input: \"\",\n            prompt: \"> \",\n            mask: false,\n            listeners: [],\n        };\n        this.input = React.createRef();\n        this.container = React.createRef();\n    }\n    componentDidMount() {\n        this.socket = new Websocket({\n            uri:\n                window.location.host === \"gorgon.mudjs.net\"\n                    ? \"wss://gorgon.mudjs.net/socket\"\n                    : \"ws://localhost:5557\",\n            terminal: this,\n        });\n    }\n    setMask(mask = false) {\n        const state = this.state;\n        state.mask = mask;\n        this.setState(state);\n    }\n    addListener(cb) {\n        const state = this.state;\n        state.listeners.push(cb);\n        this.setState(state);\n    }\n    print(data) {\n        const state = this.state;\n        if (state.buffer === \"\") {\n            state.buffer = data;\n        } else {\n            state.buffer = `${state.buffer}\\n${data}`;\n        }\n        this.setState(state, () => {\n            this.input.current.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"end\",\n            });\n        });\n    }\n    onClick(event) {\n        this.input.current.focus();\n    }\n    onChange(event) {\n        const state = this.state;\n        state.input = event.target.value;\n        this.setState(state);\n    }\n    onSubmit(event) {\n        if (this.state.input === \"\") event.preventDefault();\n        else {\n            const state = this.state;\n            const inp = state.input;\n            state.input = \"\";\n            this.setState(state);\n            this.onInput(inp);\n            event.preventDefault();\n        }\n    }\n    onInput(inp) {\n        if (!this.state.mask) this.print(\"> \" + inp);\n        else {\n            this.setMask();\n        }\n        for (const listener of this.state.listeners) {\n            listener(inp);\n        }\n    }\n    clear() {\n        const state = this.state;\n        state.buffer = \"\";\n        this.setState(state);\n    }\n    setPrompt(newPrompt = \"> \") {\n        const state = this.state;\n        state.prompt = newPrompt;\n        this.setState(state);\n    }\n    render() {\n        return (\n            <div\n                ref={this.container}\n                className=\"terminal-container\"\n                onClick={this.onClick.bind(this)}\n            >\n                <div className=\"terminal-output terminal-text\">\n                    {this.state.buffer}\n                </div>\n                <form\n                    className=\"terminal-input-container\"\n                    onSubmit={this.onSubmit.bind(this)}\n                >\n                    <span className=\"terminal-text terminal-prompt\">\n                        {this.state.prompt}\n                    </span>\n                    <input\n                        type={this.state.mask ? \"password\" : \"text\"}\n                        ref={this.input}\n                        className={[\n                            \"terminal-text\",\n                            Classes.FILL,\n                            \"terminal-input\",\n                        ].join(\" \")}\n                        value={this.state.input}\n                        onChange={this.onChange.bind(this)}\n                    />\n                </form>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/normalize.css\";\nimport \"../node_modules/@blueprintjs/core/lib/css/blueprint.css\";\nimport \"../node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\nimport { Terminal } from \"./components/terminal\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Terminal />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}